#!/usr/bin/python2.7
#find xss vulnerability in forms and urls this works by finding the urls and form and try to inject the code
#if the code gets injected then it is vulnerable to xss 
#don't sticky to this code itself this is nothing explorer others xss_vulnerabilty code online
#this works on Damn Vulnerable Web App only run your own vulnerable VM and code better than me.

import sys
import os
import requests
import re
import urlparse
from BeautifulSoup import BeautifulSoup

class Scanner:

	def __init__(self,url,ignore_links):
		try:
      self.session = requests.Session()
      self.target_url = None
      self.target_links = None
      self.links_to_ignore = None

      data_dict = {
        "username":"admin",
        "password":"password",
        "Login":"submit"
        }

    except Exception as e:
      exc_type, exc_obj, exc_tb = sys.exc_info()
      fname = os.path.split(exc_tb.tb_frame.f_code.co_filename)[1]
      print(exc_type, fname, exc_tb.tb_lineno)
      print(exc_obj)
  
  def set_links_to_ignore(self, ignore_links):
    try:
       self.links_to_ignore = ignore_links

    except Exception as e:
      exc_type, exc_obj, exc_tb = sys.exc_info()
      fname = os.path.split(exc_tb.tb_frame.f_code.co_filename)[1]
      print(exc_type, fname, exc_tb.tb_lineno)
      print(exc_obj)

  def set_target_links(self, target_links):
    try:
       self.target_links = target_links

    except Exception as e:
      exc_type, exc_obj, exc_tb = sys.exc_info()
      fname = os.path.split(exc_tb.tb_frame.f_code.co_filename)[1]
      print(exc_type, fname, exc_tb.tb_lineno)
      print(exc_obj)

  def set_target_url(self, target_url):
    try:
       self.target_url = target_url

    except Exception as e:
      exc_type, exc_obj, exc_tb = sys.exc_info()
      fname = os.path.split(exc_tb.tb_frame.f_code.co_filename)[1]
      print(exc_type, fname, exc_tb.tb_lineno)
      print(exc_obj)

	def extract_links_from(self,url):
		try:
      response = self.session.get(url)
      return re.findall('(?:href=")(.*?)"',response.content)

    except Exception as e:
      exc_type, exc_obj, exc_tb = sys.exc_info()
      fname = os.path.split(exc_tb.tb_frame.f_code.co_filename)[1]
      print(exc_type, fname, exc_tb.tb_lineno)
      print(exc_obj)

	def crawl(self,url=None):
		try:
      if url == None:
        url = self.target_url
      href_links = self.extract_links_from(url)

      for link in href_links:
        link = urlparse.urljoin(url,link)

        if "#" in link:	# #r refers to original page so avoid duplicate page again and again
          link = link.split("#")[0]

        if self.target_url in link and link not in self.target_links and link not in self.links_to_ignore:
        #to avoid repeating the same url and ignore logout url
          self.target_links.append(link)
          #print link
          self.crawl(link)

    except Exception as e:
      exc_type, exc_obj, exc_tb = sys.exc_info()
      fname = os.path.split(exc_tb.tb_frame.f_code.co_filename)[1]
      print(exc_type, fname, exc_tb.tb_lineno)
      print(exc_obj)

	def extract_forms(self,url):
		try:
      response = self.session.get(url)
      parsed_html = BeautifulSoup(response.content)
      return parsed_html.findAll("form")

    except Exception as e:
      exc_type, exc_obj, exc_tb = sys.exc_info()
      fname = os.path.split(exc_tb.tb_frame.f_code.co_filename)[1]
      print(exc_type, fname, exc_tb.tb_lineno)
      print(exc_obj)

	def submit_form(self,form,value,url):
		try:
      action = form.get("action")
      post_url = urlparse.urljoin(url,action)
      method = form.get("method")
      
      inputs_list = form.findAll("input")
      post_data = {}

      for input in inputs_list:
        input_name = input.get("name")
        input_type = input.get("type")
        input_value = input.get("value")
        if input_type == "text":
          input_value = value

        post_data[input_name] = input_value
      if method == "post":
        return self.session.post(post_url,data=post_data)
      return self.session.get(post_url,params=post_data)

    except Exception as e:
      exc_type, exc_obj, exc_tb = sys.exc_info()
      fname = os.path.split(exc_tb.tb_frame.f_code.co_filename)[1]
      print(exc_type, fname, exc_tb.tb_lineno)
      print(exc_obj)

	def run_scanner(self):
		try:
      for link in self.target_links:
        forms = self.extract_forms(link)
        for form in forms:
          print("[+] Testing form in " + link)
          is_vulnerable_to_xss = self.test_xss_in_form(form,link)
          if is_vulnerable_to_xss:
            print("--"*50)
            print("[*****] XSS discovered in "+link+" in the following form:")
            print(form)
            print("--"*50)

        if "=" in link:
          print("[+] Testing " + link)
          if_vulnerable_to_xss = self.test_xss_in_link(link)
          if is_vulnerable_to_xss:
            print("--"*50)
            print("[*****] Discovered XSS in " + link)
            print(link)
            print("--"*50	)

    except Exception as e:
      exc_type, exc_obj, exc_tb = sys.exc_info()
      fname = os.path.split(exc_tb.tb_frame.f_code.co_filename)[1]
      print(exc_type, fname, exc_tb.tb_lineno)
      print(exc_obj)

	def test_xss_in_link(self,url):
    try:
      xss_test_script = "<sCript>alert('test')</scriPt>"
      url = url.replace("=","="+ xss_test_script)
      response = self.session.get(url)
      return xss_test_script in response.content

    except Exception as e:
      exc_type, exc_obj, exc_tb = sys.exc_info()
      fname = os.path.split(exc_tb.tb_frame.f_code.co_filename)[1]
      print(exc_type, fname, exc_tb.tb_lineno)
      print(exc_obj)

	def test_xss_in_form(self,form,url):
    try:
      xss_test_script = "<sCript>alert('test')</scriPt>"
      response = self.submit_form(form,xss_test_script,url)
      return xss_test_script in response.content

    except Exception as e:
      exc_type, exc_obj, exc_tb = sys.exc_info()
      fname = os.path.split(exc_tb.tb_frame.f_code.co_filename)[1]
      print(exc_type, fname, exc_tb.tb_lineno)
      print(exc_obj)
  
  def run(self):
    try:
      vuln_scanner = Scanner(self.target_url, self.links_to_ignore)
      vuln_scanner.session.post( self.target_url + "login.php", data= self.data_dict)
      vuln_scanner.crawl()
      vuln_scanner.run_scanner()

    except Exception as e:
      exc_type, exc_obj, exc_tb = sys.exc_info()
      fname = os.path.split(exc_tb.tb_frame.f_code.co_filename)[1]
      print(exc_type, fname, exc_tb.tb_lineno)
      print(exc_obj)


# target_url = "http://192.168.44.101/dvwa/"
# links_to_ignore = ["http://192.168.44.101/dvwa/logout.php"]
# vuln_scanner = Scanner(target_url,links_to_ignore)

# data_dict = {"username":"admin","password":"password","Login":"submit"}
# vuln_scanner.session.post("http://192.168.44.101/dvwa/login.php",data=data_dict)
# #to login to get more links to test

# vuln_scanner.crawl()
# #crawl through the links
# vuln_scanner.run_scanner()
# #run scan on each links crawled